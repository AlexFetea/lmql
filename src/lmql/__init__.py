import lmql.version as version_info

"""
lmql.

A query language for language models.
"""

__version__ = version_info.version
__author__ = 'Luca Beurer-Kellner, Marc Fischer and Mark Mueller'
__email__ = "luca.beurer-kellner@inf.ethz.ch"
__license__ = "Apache 2.0"

# exposes query, run, LLM, lmql.model, lmql.generate, lmql.score etc.
from lmql.api import *

# language support

# runtime
import lmql.runtime.lmql_runtime as lmql_runtime
import lmql.runtime.lmql_runtime as runtime_support
# LMQL variable decorators
import lmql.runtime.decorators as decorators
# output and result types
from lmql.runtime.interpreter import LMQLResult
from lmql.runtime.output_writer import headless, printing, silent, stream
# re-export lmql runtime functions
from lmql.runtime.lmql_runtime import (LMQLQueryFunction, compiled_query, tag)

# utils

# LMQL specific inspect functions
import lmql.language.inspect as inspect
from lmql.runtime.lmql_runtime import is_query
# event loop utils
from lmql.runtime.loop import main

async def static_prompt(query_fct, *args, **kwargs):
    """
    Returns the static prompt prefix that is generated by the given query function up until the first variable.
    """
    res = await query_fct(*args, **kwargs, return_prompt_string=True)
    return res[0]

def serve(*args, **kwargs):
    assert not "LMQL_BROWSER" in os.environ, "lmql.serve is not available in the browser distribution of LMQL."
    from lmql.models.lmtp.lmtp_serve import serve
    return serve(*args, **kwargs)
